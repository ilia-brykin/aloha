"use strict";(self.webpackChunkaloha_vue_docs=self.webpackChunkaloha_vue_docs||[]).push([[4995],{1056:(e,t,n)=>{n.r(t),n.d(t,{default:()=>T});var l=n(6365),a=n(616),r=n(7791),o=n(2382),s=n(4461),d=n(7332),i=n(6269),h=n(7483);const u={name:"PageUtilsGetTotalNestedCountExample",components:{AlohaExample:i.A},setup(){const{codeJs:e}={codeJs:`getTotalNestedCount({ array: ["hello", "Aloha"], keyChildren: "" });\n// ${(0,h.zy)({array:["hello","Aloha"],keyChildren:""})}\n\ngetTotalNestedCount({ array: [], keyChildren: "" });\n// ${(0,h.zy)({array:[],keyChildren:""})}\n\ngetTotalNestedCount({ array: [{ children: ["hello", "world"] }, "test"], keyChildren: "children" });\n// ${(0,h.zy)({array:[{children:["hello","world"]},"test"],keyChildren:"children"})}\n\ngetTotalNestedCount({ array: [{ aloha: [{ aloha: ["hello", "world"] }, { aloha: ["hello1", "world1"] }] }, "test"], keyChildren: "aloha" });\n// ${(0,h.zy)({array:[{aloha:[{aloha:["hello","world"]},{aloha:["hello1","world1"]}]},"test"],keyChildren:"aloha"})}`};return{codeJs:e}}};var c=n(6262);const g=(0,c.A)(u,[["render",function(e,t){const n=(0,l.g2)("aloha-example");return(0,l.uX)(),(0,l.Wv)(n,{"code-js":e.codeJs,header:"_A_BASIC_USAGE_","is-code-visible-default":!0},null,8,["code-js"])}]]),y={name:"PageUtilsGetTotalNestedCount",components:{AlohaPage:a.A,ATranslation:r.A,PageFilterArguments:o.A,PageFilterImportFunction:s.A,PageFilterTest:d.A,PageUtilsGetTotalNestedCountExample:g},setup(){const{pageTitle:e}={pageTitle:"getTotalNestedCount"},{argumentsText:t}={argumentsText:[{value:"array",types:["Array"],text:"_PAGE_UTILS_GET_TOTAL_NESTED_COUNT_ARGUMENTS_ARRAY_"},{value:"keyChildren",types:["String"],text:"_PAGE_UTILS_GET_TOTAL_NESTED_COUNT_ARGUMENTS_KEY_CHILDREN_"}]};return{argumentsText:t,pageTitle:e,test:'import {\n  getTotalNestedCount,\n} from "../utils";\n\ndescribe("getTotalNestedCount function", () => {\n  test("should correctly count elements in a flat array without nested children", () => {\n    const array = ["hello", "world"];\n\n    expect(getTotalNestedCount({ array, keyChildren: "test" })).toBe(2);\n  });\n\n  test("should accurately count elements in a mixed array with and without specified nested children", () => {\n    const array = [{ children: ["hello", "world"] }, "test"];\n\n    expect(getTotalNestedCount({ array, keyChildren: "children" })).toBe(4);\n    expect(getTotalNestedCount({ array, keyChildren: "" })).toBe(2);\n  });\n\n  test("should handle deeply nested structures and count all elements correctly", () => {\n    const array = [\n      {\n        children: [\n          { children: ["hello", "world"] },\n          { children: ["hello", "world"] },\n        ],\n      },\n      {\n        children: [\n          { children: ["hello", "world"] },\n          { children: ["hello", "world"] },\n          { children: ["hello", "world"] },\n        ],\n      },\n      {\n        children: [\n          { children: ["hello", "world"] },\n        ],\n      },\n    ];\n\n    expect(getTotalNestedCount({ array, keyChildren: "children" })).toBe(21);\n  });\n\n  test("should return zero for an empty array, indicating no elements to count", () => {\n    const array = [];\n\n    expect(getTotalNestedCount({ array, keyChildren: "test" })).toBe(0);\n  });\n});\n\n'}}},T=(0,c.A)(y,[["render",function(e,t){const n=(0,l.g2)("a-translation"),a=(0,l.g2)("page-filter-import-function"),r=(0,l.g2)("page-filter-arguments"),o=(0,l.g2)("page-utils-get-total-nested-count-example"),s=(0,l.g2)("page-filter-test"),d=(0,l.g2)("aloha-page");return(0,l.uX)(),(0,l.Wv)(d,{"page-title":e.pageTitle},{body:(0,l.k6)((()=>[(0,l.bF)(n,{tag:"p",html:"_PAGE_UTILS_GET_TOTAL_NESTED_COUNT_DESCRIPTION_"}),(0,l.bF)(a,{"function-name":"getTotalNestedCount","type-import":"utils"}),(0,l.bF)(r,{"arguments-text":e.argumentsText,"function-description":"getTotalNestedCount({ array, keyChildren })"},null,8,["arguments-text"]),(0,l.bF)(o),(0,l.bF)(s,{test:e.test},null,8,["test"])])),_:1},8,["page-title"])}]])}}]);
//# sourceMappingURL=chunk.4995.b7270d71eb071a7df8e3.js.map