mixin loadingPlaceholder
  span.ui_select__placeholder(
    v-if="loading || statusListLoading || options.loading"
  )
    spinner.float-right

.ui_select(
  :id="getConteinerId"
  ref="ui_select"
  :class="[{ 'is-invalid': isError }, options.classComponent]"
  role="application"
)
  .ui-select-toggle.form_control.form-control(
    :id="getId"
    ref="button"
    :aria-labelledby="ariaLabelledby"
    role="combobox"
    :tabindex="tabindex"
    :class="[buttonClassLocal, className]"
    :style="getStylesButton"
    aria-haspopup="listbox"
    :aria-expanded="ariaExpanded"
    :aria-required="ariaRequired"
    :aria-disabled="ariaDisabled"
    :disabled="isDisabledLocal"
    v-bind="attributesHtml"
    v-auto-focus="options.autoFocus"
    @click="togglePopover"
    @keydown="handleKeydown"
    @focus="onFocus"
    @blur="onBlur"
  )
    template(
      v-if="options.fixedPlaceholder"
    )
      +loadingPlaceholder

      .d-inline-block(
        v-else
        v-html="options.fixedPlaceholder"
        v-translate="{ title: options.title }"
      )

    template(
      v-else-if="isMultiselect"
    )
      +loadingPlaceholder

      span.ui_select__placeholder(
        v-else-if="!model.length"
        v-translate="{ html: placeholder }"
      )
      span.ui_select__value__label(
        v-else
      )
        span(
          v-if="model.length > countMultiLocal"
        ) {{ model.length }} ausgew√§hlt
        template(
          v-else
        )
          span(
            v-for="(item, index) in getModelMulti"
          )
            span {{ index !== 0 ? ", " : "" }}
            ui-select-element(
              :element="item"
              :options="options"
            )
              template(
                v-if="options.slot"
                v-slot:[options.slot]="vm"
              )
                slot(
                  :name="options.slot"
                  :item="vm && vm.item"
                )


    template(
      v-else
    )
      +loadingPlaceholder

      span.ui_select__value__label(
        v-else-if="options.emptyValue && options.emptyValue === model"
        v-translate="{ text: emptyLabel }"
      )

      span.ui_select__value__label(
        v-else-if="options.extraValue && options.extraValue === model"
        v-translate="{ text: extraLabel }"
      )

      span.ui_select__placeholder(
        v-else-if="!nullInListComputed && notModelSingleSelect"
        v-translate="{ html: placeholder, extra: options.extra }"
      )
      template(
        v-else
      )
        ui-select-element(
          :element="options.keyArray ? model : modelObj"
          :options="options"
          :labelClassName="'ui_select__value__label'"
        )
          template(
            v-if="options.slot"
            v-slot:[options.slot]="vm"
          )
            slot(
              :name="options.slot"
              :item="vm && vm.item"
            )
        button.ui-select-close.absolute-center-right.margin-right-lg(
          v-if="isButtonDeleteVisible"
          @click.stop="deleteSingleModel"
          :disabled="isDisabled"
          @blur="onBlur($event)"
        )
          i.glyphicon.glyphicon-close
        button.ui-select-close.absolute-center-right.margin-right-lg(
          v-else-if="options.buttonDeleteExtern"
          @click.stop="options.buttonDeleteExtern"
          :disabled="isDisabled"
          @blur="onBlur($event)"
        )
          i.glyphicon.glyphicon-close

    span.ui-select-loading(
      v-if="loading"
    )
    slot(
      name="extrabutton"
    )
    span.ui_select__caret(
      v-if="isCaretVisible"
      aria-hidden="true"
    )
      i.glyphicon.glyphicon-chevron-down.ui_select__caret__icon


  .position-relative(
    v-show="isOpen"
    :id="idForList"
    role="application"
    :class="className"
    v-teleport="'select_container'"
    v-loading="{ status: options.loadingMenu || status.loadingSearchGlobal, msg: '', size: 'md' }"
  )
    .ui-select-menu(
      ref="ui_select_menu"
      role="listbox"
      :class="{ 'ui-select-menu-right': menuRightLocal, ui_select__menu_multiselect: isMultiselect, ui_select__menu_single_select: !isMultiselect }"
      :style="menuStylesLocal"
      :aria-labelledby="getId"
    )

      .ui-select-search(
        v-if="options.searchGlobal || options.searchOutside"
      )
        form(
          @submit.prevent="onSearchGlobal"
        )
          .input-group
            input.form-control.ui_select__element_clickable(
              ref="search"
              v-model="modelSearchGlobal"
              type="text"
              :disabled="loading"
              @blur="onBlur($event)"
              v-translate="translateOptionsForSearch"
            )
            span.input-group-append
              button.btn.btn-primary.ui_select__element_clickable.test_search_global.position-relative(
                :id="idForButtonSearchGlobal"
                ref="searchGlobal"
                type="button"
                :disabled="isSearchGlobalDisabled"
                @mousedown.prevent="onSearchGlobal"
                @blur="onBlur($event)"
              )
                pux-icon(
                  icon="search"
                )
                pux-translate.absolute-all(
                  tag="span"
                  title="_BTN_UI_SELECT_GLOBAL_SEARCH_TITLE_"
                  aria-hidden="true"
                )
                pux-translate.sr-only(
                  tag="span"
                  text="_BTN_UI_SELECT_GLOBAL_SEARCH_TITLE_"
                )
              button.sr-only(
                type="submit"
                tabindex="-1"
              )

      .ui_select__search(
        v-else-if="options.search"
      )
        input.form-control.w-100.ui_select__element_clickable(
          ref="search"
          v-model="modelSearch"
          type="text"
          :disabled="loading"
          @blur="onBlur($event)"
          v-translate="translateOptionsForSearch"
        )

      slot(
        name="extra"
      )

      template(
        v-if="isMultiselect"
      )
        .ui_select__menu__link.ui_select__menu__link_selected.ui_select__element_clickable(
          v-if="isButtonSelectAllVisible"
          role="option"
          tabindex="-1"
          @click="onSelectAll"
          @keypress.enter.space="onSelectAll"
          @blur="onBlur($event)"
        )
          pux-icon.ui_select__menu__link__icon(
            icon="ok"
          )
          pux-translate(
            tag="span"
            :text="textSelectAll"
          )

        .ui_select__menu__link.ui_select__menu__link_selected.ui_select__element_clickable(
          v-if="isButtonDeselectAllVisible"
          role="option"
          tabindex="-1"
          @click="onDeselectAll"
          @keypress.enter.space="onDeselectAll"
          @blur="onBlur($event)"
        )
          pux-icon.ui_select__menu__link__icon(
            icon="close"
          )
          pux-translate(
            tag="span"
            :text="textDeselectAll"
          )
        hr.margin-top-sm.margin-bottom-sm(
          v-if="options.separator"
          aria-hidden="true"
        )

      .ui_select__menu__link.ui_select__element_clickable(
        v-if="options.emptyValue"
        role="option"
        tabindex="-1"
        :class="getItemEmptyClass"
        :aria-selected="isItemEmptyChecked"
        :disabled="isDisabled"
        @click="changeEmptyInput"
        @keypress.enter.space="changeEmptyInput"
        @blur="onBlur($event)"
      )
        span.ui_select__menu__link__icon_box
        pux-translate(
          tag="span"
          :text="emptyLabel"
        )

      .ui_select__menu__link.ui_select__element_clickable(
        v-if="options.extraValue"
        role="option"
        tabindex="-1"
        :class="getItemExtraClass"
        :aria-selected="isItemExtraChecked"
        :disabled="isDisabled"
        @click="changeExtraInput"
        @keypress.enter.space="changeExtraInput"
        @blur="onBlur($event)"
      )
        span.ui_select__menu__link__icon_box
        pux-translate(
          tag="span"
          :text="extraLabel"
        )

      .ui_select__menu__link.ui_select__element_clickable(
        v-for="item in getListWithoutGroup"
        :key="item[keyIdLocal]"
        role="option"
        tabindex="-1"
        :class="getItemClass(item)"
        :aria-selected="isItemChecked(item)"
        :disabled="isDisabled"
        @click="changeInput(item)"
        @keypress.enter.space="changeInput(item)"
        @blur="onBlur($event)"
      )
        ui-select-element(
          :element="item"
          :options="options"
          :icon-ok-show="true"
        )
          template(
            v-if="options.slot"
            v-slot:[options.slot]="vm"
          )
            slot(
              :name="options.slot"
              :item="vm && vm.item"
            )

      template(
        v-if="keyGroupLocal"
      )
        div(
          v-for="(key, index) in listWithNotEmptyGroupSortedKeys"
          :key="key"
          role="group"
          :aria-labelledby="getId + '_group_' + index"
        )
          pux-translate(
            v-if="!options.dependency"
            :id="getId + '_group_' + index"
            tag="strong"
            :text="key"
          )

          .ui_select__menu__link.ui_select__element_clickable(
            v-for="(item, itemIndex) in listWithNotEmptyGroup[key]"
            :key="itemIndex"
            role="option"
            tabindex="-1"
            :class="getItemClass(item)"
            :aria-selected="isItemChecked(item)"
            :disabled="isDisabled"
            @click="changeInput(item)"
            @keypress.enter.space="changeInput(item)"
            @blur="onBlur($event)"
          )
            ui-select-element(
              :element="item"
              :options="options"
              :icon-ok-show="true"
            )
              template(
                v-if="options.slot"
                v-slot:[options.slot]="vm"
              )
                slot(
                  :name="options.slot"
                  :item="vm && vm.item"
                )
      template(
        v-if="!options.emptyValue"
      )
        .ui-select-not-items.mt-3(
          v-if="options.addNew && isAlreadySearched && !isSearchInList && (modelSearch.length || modelSearchGlobal.length)"
        )
          button.btn.btn-primary.ui_select__element_clickable(
            type="button"
            @click="addValueToList"
            @blur="onBlur($event)"
          ) {{ modelSearch || modelSearchGlobal }}

        pux-translate.ui-select-not-items.mt-3(
          v-else-if="getListComputed.length === 0"
          :text="emptyLabel"
        )
